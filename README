Pytt - A simple hash table in C.

Copyright (c) 2009, 2012, Oscar Sundbom
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*****************************************************************************

Each table has a fixed number of buckets. Collisions are handled
by a doubly linked list which doubles as a total list of all the
items and can therefore be used to iterate over all items in the
hash table quickly.

Each entry is of a fixed size and all data for it is allocated
in a single block. The key is stored at the end of the data in
the *data pointer. This allows implementations to extend the
HashEntry struct by creating a struct of its own and casting
between them, like so:

struct int_entry_t
{
  struct pytt_entry_hdr_t hdr;
  int value;
  char key[];
};

This way, typing your own data and accessing the key is provided
automatically by the compiler. (Well, after a single cast. :))

It is also possible to declare a typed version of the hash table
using the PYTT_DECLARE_TYPED_TABLE macro, which makes the code a
bit more type-safe as well as saving you the casting.

This code uses lookup3.c by Bob Jenkis for hash key calculation.

